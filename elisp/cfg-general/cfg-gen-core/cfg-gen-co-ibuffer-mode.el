;;; cfg-gen-co-ibuffer-mode.el --- general.el for ibuffer-mode -*- lexical-binding: t -*-

(general-define-key
 :states '(normal visual emacs)
 :keymaps '(ibuffer-mode-map)
 :major-modes '(ibuffer-mode)
 :prefix ","
 ","  '(ibuffer-toggle-sorting-mode :which-key "toggle-sorting-mode")
 "!"  '(ibuffer-do-shell-command-file :which-key "do-shell-command-file")
 "*"  '(:ignore t :which-key "mark")
 "**" '(ibuffer-unmark-all :which-key "unmark-all")
 "*." '(ibuffer-mark-old-buffers :which-key "mark-old-buffers")
 "*/" '(ibuffer-mark-dired-buffers :which-key "mark-dired-buffers")
 "*M" '(ibuffer-mark-by-mode :which-key "mark-by-mode")
 "*c" '(ibuffer-change-marks :which-key "change-marks")
 "*e" '(ibuffer-mark-dissociated-buffers :which-key "mark-dissociated")
 "*h" '(ibuffer-mark-help-buffers :which-key "mark-help")
 "*m" '(ibuffer-mark-modified-buffers :which-key "mark-modified")
 "*r" '(ibuffer-mark-read-only-buffers :which-key "mark-read-only")
 "*s" '(ibuffer-mark-special-buffers :which-key "mark-special")
 "*t" '(ibuffer-toggle-marks :which-key "toggle-marks")
 "*u" '(ibuffer-mark-unsaved-buffers :which-key "mark-unsaved")
 "*z" '(ibuffer-mark-compressed-file-buffers :which-key "mark-compressed-file")
 "/"  '(:ignore t :which-key "filter")
 "/ <RET>" '(ibuffer-filter-by-mode :which-key "by-mode")
 "/ <SPC>" '(ibuffer-filter-chosen-by-completion :which-key "filter-by-completion")
 "/ <TAB>"   '(ibuffer-exchange-filters :which-key "exchange-filters")
 "/!"  '(ibuffer-negate-filter :which-key "negate-filter")
 "/&"  '(ibuffer-and-filter :which-key "and-filter")
 "/*"  '(ibuffer-filter-by-starred-name :which-key "by-starred-name")
 "//"  '(ibuffer-filter-disable :which-key "disable-filter")
 "/-"  '(ibuffer-filter-disable :which-key "disable-filter")
 "/." '(ibuffer-filter-by-file-extension :which-key "by-extension")
 "/<"  '(ibuffer-filter-by-size-lt :which-key "size <")
 "/>"  '(ibuffer-filter-by-size-gt :which-key "size >")
 "/C"  '(ibuffer-filter-by-content :which-key "by-content")
 "/D"  '(ibuffer-decompose-filter-group :which-key "decompose-group")
 "/E"  '(ibuffer-filter-by-process :which-key "by-process")
 "/F"  '(ibuffer-filter-by-directory :which-key "by-directory")
 "/M"  '(ibuffer-filter-by-derived-mode :which-key "by-derived-mode")
 "/P"  '(ibuffer-pop-filter-group :which-key "pop-filter-group")
 "/R"  '(ibuffer-switch-to-saved-filter-groups :which-key "switch-to-saved-groups")
 "/S <up>"   '(ibuffer-pop-filter :which-key "pop-filter")
 "/S"  '(ibuffer-save-filter-groups :which-key "save-filter-groups")
 "/S" '(:ignore t :which-key "pop-filter")
 "/Sg" '(ibuffer-pop-filter-group :which-key "pop-filter-group")
 "/X"  '(ibuffer-delete-saved-filter-groups :which-key "delete-saved-groups")
 "/a"  '(ibuffer-add-saved-filters :which-key "add-saved-filters")
 "/b"  '(ibuffer-filter-by-basename :which-key "by-basename")
 "/c"  '(ibuffer-clear-filter-groups :which-key "clear-filter-groups")
 "/d"  '(ibuffer-decompose-filter :which-key "decompose-filter")
 "/e"  '(ibuffer-filter-by-predicate :which-key "by-predicate")
 "/f"  '(ibuffer-filter-by-filename :which-key "by-filename")
 "/g"  '(ibuffer-filters-to-filter-group :which-key "filters->group")
 "/i"  '(ibuffer-filter-by-modified :which-key "by-modified")
 "/m"  '(ibuffer-filter-by-used-mode :which-key "by-used-mode")
 "/n"  '(ibuffer-filter-by-name :which-key "by-name")
 "/o"  '(ibuffer-or-filter :which-key "or-filter")
 "/p"  '(ibuffer-pop-filter :which-key "pop-filter")
 "/r"  '(ibuffer-switch-to-saved-filters :which-key "switch-to-saved")
 "/s"  '(ibuffer-save-filters :which-key "save-filters")
 "/t"  '(ibuffer-exchange-filters :which-key "exchange-filters")
 "/v"  '(ibuffer-filter-by-visiting-file :which-key "by-visiting-file")
 "/x"  '(ibuffer-delete-saved-filters :which-key "delete-saved")
 "/y"  '(ibuffer-or-filter :which-key "or-filter")
 "="  '(ibuffer-diff-with-file :which-key "diff-with-file")
 "D"  '(ibuffer-do-delete :which-key "delete/kill buffer")
 "I"  '(ibuffer-do-query-replace-regexp :which-key "query-replace-regexp")
 "L"  '(ibuffer-do-toggle-lock :which-key "toggle-lock")
 "M"  '(ibuffer-do-toggle-modified :which-key "toggle-modified")
 "O"  '(ibuffer-do-occur :which-key "occur")
 "Q"  '(ibuffer-do-query-replace :which-key "query-replace")
 "R"  '(ibuffer-do-rename-uniquely :which-key "rename-uniquely")
 "RET" '(ibuffer-visit-buffer :which-key "visit-buffer")
 "S"  '(ibuffer-do-save :which-key "save")
 "T"  '(ibuffer-do-toggle-read-only :which-key "toggle-read-only")
 "d"  '(ibuffer-mark-for-delete :which-key "mark-delete")
 "f <up>" '(ibuffer-pop-filter :which-key "pop-filter")
 "f"  '(:ignore t :which-key "basic filters")
 "f*" '(ibuffer-filter-by-starred-name :which-key "by-starred-name")
 "f-" '(ibuffer-filter-disable :which-key "disable-filter")
 "f." '(ibuffer-filter-by-file-extension :which-key "by-extension")
 "fC"  '(ibuffer-filter-by-content :which-key "by-content")
 "fF" '(ibuffer-filter-by-directory :which-key "by-directory")
 "fb" '(ibuffer-filter-by-basename :which-key "by-basename")
 "fi" '(ibuffer-filter-by-modified :which-key "by-modified")
 "fm" '(ibuffer-filter-by-used-mode :which-key "by-mode")
 "fn" '(ibuffer-filter-by-name :which-key "by-name")
 "g"  '(ibuffer-update :which-key "update")
 "j"  '(ibuffer-jump-to-buffer :which-key "jump-to-buffer")
 "m"  '(ibuffer-mark-forward :which-key "mark")
 "o"  '(ibuffer-visit-buffer-other-window :which-key "visit-other-window")
 "p" '(:ignore t :which-key "groups")
 "pd" '(ibuffer-delete-saved-filter-groups :which-key "delete-filter-groups")
 "pr" '(ibuffer-switch-to-saved-filter-groups :which-key "restore-filter-groups")
 "ps" '(ibuffer-save-filter-groups :which-key "save-filter-groups")
 "q"  '(kill-buffer-and-window :which-key "quit")
 "r"  '(ibuffer-do-replace-regexp :which-key "replace-regexp")
 "s"  '(:ignore t :which-key "sort")
 "sS" 'ibuffer-do-sort-by-size
 "sa" '(ibuffer-do-sort-by-alphabetic :which-key "s-by-name")
 "sf" '(ibuffer-do-sort-by-filename/process :which-key "s-by-filename")
 "si" '(ibuffer-invert-sorting :which-key "invert-sorting")
 "sm" '(ibuffer-do-sort-by-major-mode :which-key "s-by-major-mode")
 "so" '(ibuffer-do-sort-by-mode-name :which-key "s-by-mode-name")
 "sp" '(ibuffer-do-sort-by-filename/process :which-key "s-by-process")
 "ss" '(ibuffer-do-sort-by-size :which-key "s-by-size")
 "st" '(ibuffer-toggle-sorting-mode :which-key "toggle-sorting-mode")
 "sv" '(ibuffer-do-sort-by-recency :which-key "s-by-recency")
 "t"  '(:ignore t :which-key "toggle")
 "tt" '(ibuffer-toggle-marks :which-key "t-marks")
 "t*" '(ibuffer-toggle-marks :which-key "t-marks")
 "ts" '(ibuffer-toggle-sorting-mode :which-key "t-sorting-mode")
 "tT" '(ibuffer-do-toggle-read-only :which-key "t-read-only")
 "tr" '(ibuffer-do-toggle-read-only :which-key "t-read-only")
 "tM" '(ibuffer-do-toggle-modified :which-key "t-modified")
 "tm" '(ibuffer-do-toggle-modified :which-key "t-modified")
 "tL" '(ibuffer-do-toggle-lock :which-key "t-lock")
 "tl" '(ibuffer-do-toggle-lock :which-key "t-lock")
 "u"  '(ibuffer-unmark-forward :which-key "unmark")
 "v"  '(ibuffer-do-view :which-key "view")
 "x"  '(ibuffer-do-kill-on-deletion-marks :which-key "execute-delete"))

(general-define-key
 :states '(normal visual emacs)
 :keymaps '(ibuffer-mode-map)
 :major-modes '(ibuffer-mode)
 "q"  'kill-buffer-and-window
 "Q"  'kill-this-buffer
 )

(with-eval-after-load 'ibuffer

  ;; Binds in the correct map (ibuffer-name-map)
  (define-key ibuffer-name-map [mouse-1] #'ibuffer-mouse-visit-buffer)  ; Mouse Left Click: visit-buffer
  (define-key ibuffer-name-map [mouse-2] #'ibuffer-mouse-toggle-mark)
  (define-key ibuffer-name-map [mouse-8] #'ibuffer-mouse-toggle-mark)
  (define-key ibuffer-name-map [mouse-9] #'ibuffer-mouse-toggle-mark)

  ;; (define-key ibuffer-name-map [down-mouse-3] nil)  ; Disable popup on right click
  ;; (define-key ibuffer-name-map [mouse-3] #'cfg/ibuffer-mouse-mark)  ; Mouse Right Click: select buffer
  )

(defun cfg/ibuffer-disable-mouse-tooltips ()
  "Disable mouse tooltips (help-echo) in `ibuffer-mode`."
  (setq-local help-at-pt-display-when-idle nil)
  (setq-local tooltip-mode nil)
  (with-silent-modifications
    (remove-text-properties (point-min) (point-max) '(help-echo nil))))
(add-hook 'ibuffer-mode-hook #'cfg/ibuffer-disable-mouse-tooltips)

(provide 'cfg-gen-co-ibuffer-mode)
;;; cfg-gen-co-ibuffer-mode.el ends here
